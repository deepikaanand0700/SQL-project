# Write a SQL query to display the data types of all columns in the customers table. #

select column_name , data_type from `ecommerce001-435209.Target_analysis.INFORMATION_SCHEMA.COLUMNS` where table_name = "customers"

# Find the time range between which orders were placed #

Select min(order_purchase_timestamp) as strt_time , max(order_purchase_timestamp) as end_time from `Target_analysis.orders`

# Count unique cities and states where orders were placed #

select count(distinct customer_city) as total_city, count(distinct customer_state) as total_state from `Target_analysis.customers`

# Check if the number of orders increased over time #

select count(distinct order_id) as total_order_ , extract(month from order_purchase_timestamp) as month_, extract(year from order_purchase_timestamp) as year_ from `Target_analysis.orders` group by 3 , 2 order by 3 , 2

# Is there a growing trend in the no. of orders placed over the past years?  #

select count(distinct order_id) as total_order_ , extract(month from order_purchase_timestamp) as month_  from `Target_analysis.orders` group by 2 order by 1 desc

## During what time of the day, do the Brazilian customers mostly place their orders? (Dawn, Morning, Afternoon or Night) 
-- 0-6 hrs : Dawn -- 7-12 hrs : Mornings -- 13-18 hrs : Afternoon -- 19-23 hrs : Night

With hour_category as 
(select order_id, 
case 
when extract(hour from order_purchase_timestamp) between 0 and 6 then "Dawn"
when extract(hour from order_purchase_timestamp) between 7 and 12 then "Mornings"
when extract(hour from order_purchase_timestamp) between 13 and 18 then "Afternoon"
when extract(hour from order_purchase_timestamp) between 19 and 23 then "Night"
End as hours_
 from `Target_analysis.orders`)

 select hours_ , count(order_id) as count_of_order
 from hour_category
 group by hours_
 order by count_of_order desc

## Get the month on month no. of orders placed in each state.#

select count(distinct order_id) as total_order ,customer_state
 , extract(month from order_purchase_timestamp) as month
   from `Target_analysis.customers` as c  
join `Target_analysis.orders` as o  
on c.customer_id = o.customer_id
group by 2 ,3
order by 1 desc

## How are the customers distributed across all the states? #

select customer_state ,count(customer_unique_id) as total_customers from `Target_analysis.customers`
 group by 1
 order by 2 desc

# Get the % increase in the cost of orders from year 2017 to 2018 (include months between Jan to Aug only).#

with cost_per_month as
(select extract(month from order_purchase_timestamp) as month,
extract(year from order_purchase_timestamp) as year , 
 sum(price * freight_value) as total_price
 from `Target_analysis.orders` as o  
join `Target_analysis.order_items` as oi  
on o.order_id = oi.order_id
where extract(year from order_purchase_timestamp) in (2017,2018) and
extract(month from order_purchase_timestamp) between 1 and 8
group by 2 ,1
order by 1 , 2 desc)

select month , year ,
round((total_price - (lag(total_price) over(partition by month order by year))) / (lag(total_price) over(partition by month order by year)) * 100 , 2) as percent_increase
 from cost_per_month
 order by 1,2

# Calculate the Total & Average value of order price for each state #

select customer_state, 
sum(price) as total, 
Avg(price) as average
 from `Target_analysis.orders` as o  
join `Target_analysis.order_items` as oi 
on o.order_id = oi.order_id 
join `Target_analysis.customers` as c
on o.customer_id = c.customer_id
group by 1
order by 1

# Calculate the Total & Average value of order freight for each state. #

select customer_state, 
sum(freight_value) as total, 
Avg(freight_value) as average
 from `Target_analysis.orders` as o  
join `Target_analysis.order_items` as oi 
on o.order_id = oi.order_id 
join `Target_analysis.customers` as c
on o.customer_id = c.customer_id
group by 1
order by 1

# Find the no. of days taken to deliver each order from the orderâ€™s purchase date as delivery time. #
# Also, calculate the difference (in days) between the estimated & actual delivery date of an order. #

select order_id ,
order_delivered_customer_date - order_purchase_timestamp as time_to_deliver ,
order_estimated_delivery_date - order_delivered_customer_date as deff_estimated_delivery
 from `Target_analysis.orders`
order by 2 desc

# Find out the top 5 states with the highest & lowest average freight value. #

with average_of_fv as
(select customer_state, avg(freight_value) as average
 from `Target_analysis.orders` as o  
join `Target_analysis.order_items` as oi 
on o.order_id = oi.order_id 
join `Target_analysis.customers` as c
on o.customer_id = c.customer_id
group by 1)

(select * from average_of_fv
order by average
limit 5)
union all
(select * from average_of_fv
order by average desc
limit 5)
order by average

# Find out the top 5 states with the highest & lowest average delivery time. #

with average_of_fv as
(select customer_state, avg(DATE_DIFF(order_delivered_customer_date , order_purchase_timestamp , day)) as average
 from `Target_analysis.orders` as o  
join `Target_analysis.order_items` as oi 
on o.order_id = oi.order_id 
join `Target_analysis.customers` as c
on o.customer_id = c.customer_id
group by 1)

(select * from average_of_fv
order by average
limit 5)
union all
(select * from average_of_fv
order by average desc
limit 5)
order by average

# Find out the top 5 states where the order delivery is really fast as compared to the estimated date of delivery #
# You can use the difference between the averages of actual & estimated delivery date to figure out how fast the delivery was for each state. #

with  delivery_time_comparison as
(select customer_state, avg(DATE_DIFF(order_estimated_delivery_date , order_delivered_customer_date , day)) as average
 from `Target_analysis.orders` as o  
join `Target_analysis.order_items` as oi 
on o.order_id = oi.order_id 
join `Target_analysis.customers` as c
on o.customer_id = c.customer_id
group by 1)
select * from delivery_time_comparison
order by average desc
limit 5

# Find the month on month no. of orders placed using different payment types. #

select count(distinct o.order_id)as total_orders , payment_type,
extract(year from order_purchase_timestamp) as year,
extract(month from order_purchase_timestamp) as month
 from `Target_analysis.orders` as o  
join `Target_analysis.payments` as p  
on o.order_id = p.order_id
group by 2,3,4
order by 2,3,4

#  Find the no. of orders placed on the basis of the payment installments that have been paid #

select count(order_id) , payment_installments
from  `Target_analysis.payments` 
where payment_installments != 0
group by 2
order by 1

# 






